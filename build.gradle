plugins {
    id 'java'
    id 'jacoco'
    id 'idea'
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'com.google.cloud.tools.jib' version '2.4.0'
}

apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'

sourceCompatibility = '1.14'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
ext {
    junit5Version = '5.6.2'
}
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springdoc:springdoc-openapi-ui:1.4.0'


    implementation 'io.micrometer:micrometer-registry-prometheus:1.5.1'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'net.logstash.logback:logstash-logback-encoder:6.4'
    implementation 'fi.solita.clamav:clamav-client:1.0.1'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation ('org.springframework.boot:spring-boot-starter-test'){
        exclude group: 'org.junit.vintage'
    }
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5Version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5Version"
    testImplementation("org.springframework.boot:spring-boot-starter-tomcat")
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5Version"


}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.5"
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        html.enabled false
    }
}



configurations {
    jib {
        from{ image 'openjdk:14-jdk-alpine' }
        to {
            image "audig/${rootProject.name}"
            auth {
                username System.getenv("DOCKER_USERNAME")
                password System.getenv("DOCKER_PASSWORD")
            }
        }
    }
}



tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}
